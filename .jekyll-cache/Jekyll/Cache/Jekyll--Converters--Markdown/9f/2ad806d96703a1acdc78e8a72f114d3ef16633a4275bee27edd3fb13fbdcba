I"@5<p>클래스와 인터페이스 선언에 타입 매개변수가 쓰이면 이를 <strong>제너릭 클래스</strong> 혹은 <strong>제너릭 인터페이스</strong>라고 한다. List 인터페이스로 예를 들자면, List 인터페이스는 원소의 타입을 나타내는 타입 매개변수 E를 받는다.</p>

<p><code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code> 에서는 String이 정규 타입 매개변수 E에 해당하는 실제 타입 매개 변수이다.</p>

<h2 id="단어-정리">단어 정리</h2>

<table>
  <thead>
    <tr>
      <th>한글용어</th>
      <th>영문용어</th>
      <th>예</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>매개변수화 타입</td>
      <td>parameterized type</td>
      <td>List&lt;String&gt;</td>
    </tr>
    <tr>
      <td>실제 타입 매개변수</td>
      <td>actual type parameter</td>
      <td>String</td>
    </tr>
    <tr>
      <td>제너릭 타입</td>
      <td>generic type</td>
      <td>List&lt;E&gt;</td>
    </tr>
    <tr>
      <td>정규 타입 매개변수</td>
      <td>formal type parameter</td>
      <td>E</td>
    </tr>
    <tr>
      <td>비한정적 와일드카드 타입</td>
      <td>unbounded wildcard type</td>
      <td>List&lt;?&gt;</td>
    </tr>
    <tr>
      <td>로 타입</td>
      <td>raw type</td>
      <td>List</td>
    </tr>
    <tr>
      <td>한정적 타입 매개 변수</td>
      <td>bounded type parameter</td>
      <td>&lt;E extends Number&gt;</td>
    </tr>
    <tr>
      <td>재귀적 타입 한정</td>
      <td>recursive type bound</td>
      <td>&lt;T extends Comparable&lt;T&gt;&gt;</td>
    </tr>
    <tr>
      <td>한정적 와일드카드 타입</td>
      <td>bounded wildcard type</td>
      <td>List&lt;? extends Number&gt;</td>
    </tr>
  </tbody>
</table>

<h2 id="raw-타입">Raw 타입</h2>

<p>raw 타입이란, <strong>제너릭 타입에서 타입 매개 변수를 전혀 사용하지 않을 때</strong>를 말한다. 예를 들어 List를 선언할 때 <code class="language-plaintext highlighter-rouge">List</code> 만 선언해 놓은 경우를 말한다.</p>

<p><strong>컬렉션의 Raw 타입</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">final</span> <span class="nc">Collection</span> <span class="n">stamps</span> <span class="o">=</span> <span class="o">...;</span>
</code></pre></div></div>

<p>이 코드를 사용하면 실수로 도장(Stamp) 대신 동전(Coin)을 넣어도 아무 오류 없이 컴파일 되고 실행된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//실수로 동전을 넣는다.</span>
<span class="n">stamps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Coin</span><span class="o">(...));</span> <span class="c1">// "unchecked call" 경고를 내뱉는다.</span>
</code></pre></div></div>

<p><strong>매개변수화된 컬렉션 타입 - 타입 안전성 확보!</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">final</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Stamp</span><span class="o">&gt;</span> <span class="n">stamps</span> <span class="o">=</span> <span class="o">...;</span>
</code></pre></div></div>

<p>이렇게 선언하면 컴파일러는 stamps에는 Stamp의 인스턴스만 넣어야 함을 컴파일러가 인지하게 된다. 따라서 아무런 경고 없이 컴파일된다면 의도대로 동작할 것임을 보장해준다.</p>

<h2 id="제너릭-소거generic-erasure">제너릭 소거(Generic erasure)</h2>

<p>Raw 타입을 쓰는 걸 언어 차원에서 막아 놓지는 않았지만 절대로 써서는 안 된다. <strong>Raw 타입을 쓰면 제너릭이 안겨주는 안전성과 표현력을 모두 잃게 된다.</strong></p>

<p>그렇다면 Raw 타입을 왜 없애지 않았을까? 바로 호환성 때문이다. 자바가 제너릭을 받아들이기까지 거의 10년이 걸린 탓에 제너릭 없이 짠 코드가 이미 많아졌다. 그래서 기존 코드를 모두 수용하면서 제너릭을 사용하는 새로운 코드와도 맞물려 돌아가게 해야만 했다.</p>

<p>Raw 타입을 사용하는 메서드에 매개변수화 타입의 인스턴스를 넘겨도 동작해야만 해야했다. 이 마이그레이션 호환성을 위해 Raw 타입을 지원하고 제너릭 구현에는 소거 방식을 사용하기로 했다.</p>

<h3 id="list-vs-listobject의-차이">List vs List&lt;Object&gt;의 차이</h3>

<p>List 같은 Raw 타입은 사용해서는 안되지만, List&lt;Object&gt; 처럼 임의 객체를 허용하는 매개변수화 타입은 괜찮다.</p>

<p>이 둘의 차이점은 List는 <strong>제너릭 타입에서 완전히 발을 뺀 것이고</strong> List&lt;Object&gt;는 모든 타입을 허용한다는 의사를 컴파일러에게 명확히 전달한 것이다.</p>

<p>List 매개변수에는 List&lt;String&gt;을 전달할 수는 있지만, List&lt;Object&gt; 매개변수에는 List&lt;String&gt;을 전달할 수 없다. <strong>즉 타입 안정성을 잃게 된다.</strong></p>

<h3 id="제너릭-소거-더-알아보기">제너릭 소거 더 알아보기</h3>

<p>다음과 같은 메서드가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="no">E</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">E</span> <span class="n">element</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s "</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 메서드를 컴파일 하면 다음과 같이 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">element</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s "</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>컴파일 시 E타입이 Object 타입으로 변경이 된다.</p>

<p>이렇게 E 타입만 있는 상황을 unbound 되었다라고 한다.</p>

<p>이번엔 이렇게 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="no">E</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">E</span> <span class="n">element</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s "</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 메서드를 컴파일하면 다음과 같이 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="nc">Comparable</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Comparable</span> <span class="n">element</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s "</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>아까랑은 다르게 E가 부모타입인 Comparable로 되었다.</p>

<p>이렇게 부모 타입으로 변경되는 상황을 bound 되었다라고 한다.</p>

<h2 id="raw-타입을-써야-할-때">Raw 타입을 써야 할 때</h2>

<p>제너릭 타입을 쓰고 싶지만 실제 타입 매개변수가 무엇인지 신경 쓰고 싶지 않다면 물음표(?)를 사용하자. 제너릭 타입인 Set&lt;E&gt;의 비한정적 와일드 카드(Unbound wildcard type)은 Set&lt;?&gt; 이다. 이것이 어떤 타입이라도 담을 수 있는 가장 범용적인 매개변수화 Set이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">numElementsInCommon</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;?&gt;</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">Set</span><span class="o">&lt;?&gt;</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>

<h3 id="set-vs-set">Set vs Set&lt;?&gt;</h3>

<p>이 둘의 특징을간단히 말하자면 와일드카드 타입은 안전하고, Raw타입은 안전하지 않다. Raw 타입 컬렉션은 아무 원소나 넣을 수 있으니 타입 불변식을 훼손하기 쉽다. <strong>반면 Collection&lt;?&gt; 에는 어떤 원소도 넣을 수 없다.</strong> 다른 원소를 넣으려고 하면 오류메세지가 나온다.</p>

<p>즉 컬렉션의 타입 불변식을 훼손하지 못하게 막았다. 구체적으로는 어떤 원소도 Collection&lt;?&gt;에 넣지 못하게 했으며 컬렉션에서 꺼낼 수 있는 객체의 타입도 전혀 알 수 없게 했다. 이러한 제약을 받아들일 수 없다면 제너릭 메서드나 한정적 와일드카드 타입을 사용하면 된다.</p>

<hr />

<p>로 타입을 쓰지 말라는 규칙에도 예외가 몇 개 있다.</p>

<p><strong>class 리터럴에는 Raw 타입을 써야 한다.</strong> 자바 명세는 class 리터럴에 매개변수화 타입을 사용하지 못하게 했다.예를 들어 List.class, String[].class, int.class는 허용하고 LIst&lt;String&gt;.class와 List&lt;?&gt;.class는 허용하지 않는다.</p>

<p>또 다른 예로 instanceof 연산자와 관련이 있다. 런타임에는 제너릭 타입 정보가 지워지므로 instanceof 연산자는 비한정적 와일드카드 타입 이외의 매개변수화 타입에는 적용할 수 없다. 그리고 Raw 타입이든 비한정적 와일드카드 타입이든 instanceof는 완전히 똑같이 동작한다. 비한정적 와일드카드 타입의 꺽쇠괄호와 물음표는 아무런 역할 없이 코드만 지저분하게 만드므로, 차라리 raw 타입을 쓰는 편이 깔끔하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Set</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Set</span><span class="o">&lt;?&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Set</span><span class="o">&lt;?)</span><span class="n">o</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="정리">정리</h2>

<p>Raw 타입을 사용하면 런타임에 예외가 일어날 수 있으니 사용하면 안 된다. Raw 타입은 제너릭이 도입되기 이전 코드와의 호환성을 위해 제공될 뿐이다.</p>
:ET