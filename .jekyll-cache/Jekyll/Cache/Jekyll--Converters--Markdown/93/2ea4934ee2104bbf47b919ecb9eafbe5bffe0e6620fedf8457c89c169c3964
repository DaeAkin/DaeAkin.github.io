I"6V<p>앞에서 이야기 했듯이 매개변수화 타입 (ex: List&lt;String&gt; 등 )은 불공변이다. 즉 <code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code> 과 <code class="language-plaintext highlighter-rouge">List&lt;Object&gt;</code> 의 하위타입이 아니라는 뜻이다.</p>

<p><code class="language-plaintext highlighter-rouge">List&lt;Object&gt;</code> 에는 어떤 객체든지 넣을 수 있지만 <code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code> 에는 문자열만 넣을 수 있다.</p>

<h2 id="불공변-방식의-문제점">불공변 방식의 문제점</h2>

<p>다음과 같이 Stack 클래스의 public API가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nf">Stack</span><span class="o">();</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">);</span>
  <span class="kd">public</span> <span class="no">E</span> <span class="nf">pop</span><span class="o">();</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기에 일련의 원소를 스택에 넣는 메서드를 추가한다고 가정해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">pushAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="no">E</span> <span class="n">e</span> <span class="o">:</span> <span class="n">src</span><span class="o">)</span>
    <span class="n">push</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>이 메서드는 src의 원소타입이 Stack의 타입과 일치할 때는 정상적으로 작동한다.</strong></p>

<p>하지만, Stack의 하위타입을 넣고자 할 때는 오류가 발생한다.</p>

<p>다음과 같이 <code class="language-plaintext highlighter-rouge">Stack&lt;Number&gt;</code> 스택을 하나 선언하고, <strong>Number의 하위 타입인 Integer 값</strong>을 넣어보자.</p>

<p><strong><code class="language-plaintext highlighter-rouge">Stack&lt;Number&gt;</code> 에 Integer 타입 추가</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Number</span><span class="o">&gt;</span> <span class="n">numberStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="o">...;</span>
<span class="n">numberStack</span><span class="o">.</span><span class="na">pushAll</span><span class="o">(</span><span class="n">integers</span><span class="o">);</span>
</code></pre></div></div>

<p>위와 같이 코드를 작성하면 <strong>호환되지 않는 타입(incompatible types)</strong> 이라고 컴파일 오류가 나온다.</p>

<h2 id="왜-그럴까">왜 그럴까?</h2>

<p>앞서 말한 것처럼 매개변수화 타입인 <code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code> ,<code class="language-plaintext highlighter-rouge">Collection&lt;Integer&gt;</code>  등등은 하위타입이 없고 자기자신 그대로만 받기 때문이다.</p>

<p>아무리 Number의 하위타입이 Integer라고 해도 매개변수화 타입에서 사용되면, 각각 다른 클래스로 보는 것이다.</p>

<h2 id="해결-해보기">해결 해보기</h2>

<p><code class="language-plaintext highlighter-rouge">Stack&lt;Number&gt;</code> 의 클래스가 Number의 하위타입인 Integer도 받고 싶으면 매개변수에 한정적 와일드카드 타입을 선언하면 된다.</p>

<p><code class="language-plaintext highlighter-rouge">Iterable&lt;? extends E&gt; src</code> 라고 선언하면 된다. 이 코드를 해석하면, <strong>Iterable을 받는데, E타입과 E를 확장한 클래스를 타입으로 받겠다.</strong> 라고 해석하면 된다.</p>

<p>다시 Number의 예제로 돌아가서, <code class="language-plaintext highlighter-rouge">Stack&lt;Number&gt;</code> 로 Stack을 만들게 되면, <code class="language-plaintext highlighter-rouge">Iterable&lt;? extends Number&gt; src</code> 이 되기 때문에 정상적으로 컴파일이 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">pushAll</span><span class="o">(</span><span class="nc">Iterable</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="no">E</span> <span class="n">e</span> <span class="o">:</span> <span class="n">src</span><span class="o">)</span>
    <span class="n">push</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>parameterized type의 제너릭 소거</p>

  <p>Parameterized Type의 경우에는 Type erasure에 의하여 컴파일시에 <code class="language-plaintext highlighter-rouge">Raw Type</code>으로 변경된다.</p>

  <p><code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code>, <code class="language-plaintext highlighter-rouge">List&lt;Integer&gt;</code>, <code class="language-plaintext highlighter-rouge">List&lt;List&lt;String&gt;&gt;</code>의 타입정보는 컴파일 시에 타입 안정성 검증 용도로 사용될 뿐 컴파일이 완료되면 Raw Type인 List로 치환된다.</p>
</blockquote>

<h2 id="불공변-방식의-문제점2">불공변 방식의 문제점2</h2>

<p>이번에는 Stack 안의 모든 원소를 주어진 컬렉션으로 옮겨 담는다고 가정해보자.</p>

<p><strong>popAll 메서드</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">popAll</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">dst</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">while</span> <span class="o">(!</span><span class="n">isEmpty</span><span class="o">())</span> 
    <span class="n">dst</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pop</span><span class="o">())</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 메서드의 문제점도 위와 비슷하다. 파라미터 타입은 불공변이기 때문에 <strong>Stack이 Number 타입이라면 Collection도 Number 타입이여만 한다.</strong></p>

<p><strong>Collection&lt;Object&gt; 에는 넣지 못하는 코드</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Number</span><span class="o">&gt;</span> <span class="n">numberStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
<span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="o">...;</span>
<span class="n">numberStack</span><span class="o">.</span><span class="na">popAll</span><span class="o">(</span><span class="n">objects</span><span class="o">);</span> <span class="c1">// 오류가 발생한다.</span>
</code></pre></div></div>

<p>이 오류를 해결하기 위해서는 Number의 상위타입을 받아들인다고 제너릭에게 말을 해야 한다.</p>

<p><strong>매개변수에 와일드카드 타입 적용</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">popAll</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">dst</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">while</span> <span class="o">(!</span><span class="n">isEmpty</span><span class="o">())</span>
    <span class="n">dst</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pop</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="pecs-공식">PECS 공식</h2>

<p><strong>PESC 공식은 producer-extends, consumer-super 의 줄임말이다.</strong></p>

<p>위와 같이 어느 경우에는 extends를 , 다른 경우에는 super를 사용하는데, 다음 공식을 외워두면 어떤 어떤걸 사용할지 기억하는 데 도움이 된다.</p>

<p>첫 번째 예제에서는 <code class="language-plaintext highlighter-rouge">Iterable&lt;? extends E&gt; src</code> 로 extends를 사용했다. 여기서 extends가 사용된 이유는 <strong>src은 stack에 원소를 추가하는 생산자 역할을 하기 때문이다.</strong> 그러므로 생산자 역할을 한다면 extends를 사용한다.</p>

<p>두 번째 예제에서 <code class="language-plaintext highlighter-rouge">Collection&lt;? super E&gt; dst</code> 는 super를 사용했다. <strong>super가 사용된 이유는 Stack으로부터 E 인스턴스를 소비하므로 super가 사용 되었다.</strong></p>

<p><strong>만약 생산자와 소비자의 역할을 동시에 한다면, 타입을 정확히 지정해야 하는 상황이므로 제너릭 타입을 그대로 쓰면 된다.</strong></p>

<h2 id="불공변-방식의-문제점3">불공변 방식의 문제점3</h2>

<p>이번에는 좀 더 복잡한 문제를 해결해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;&gt;</span> <span class="no">E</span> <span class="nf">max</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</code></pre></div></div>

<p>이 메서드의 정의를 해석해보자면, <strong>E타입의 List를 인자로 받고, 그 List에서 가장 큰 값을 리턴한다. 하지만 리턴되는 타입은 Comparable을 구현해야 한다.</strong></p>

<p>그럼 이 메서드의 인자로 <code class="language-plaintext highlighter-rouge">List&lt;ScheduledFutuer&lt;?&gt;&gt; scheduledFutures = ...;</code> 를 전달해보자.</p>

<h3 id="scheduledfutuer-클래스">ScheduledFutuer 클래스</h3>

<p><strong>ScheduledFuture 클래스의 부모 클래스는 Delayed 클래스이고, Delayed 클래스는 Comparable을 구현했다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Delayed</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Delayed</span><span class="o">&gt;</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ScheduledFuture</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Delayed</span><span class="o">,</span> <span class="nc">Future</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>그러면 결국 ScheduledFuture 클래스도 Delayed 클래스를 상속 받았으니, Comprable을 구현한 것이나 마찬가지다.</p>

<p>그러나 <code class="language-plaintext highlighter-rouge">List&lt;ScheduledFutuer&lt;?&gt;&gt; scheduledFutures</code> 을 인자로 넘기게 되면,  매개변수 타입의 불공변 때문에, <strong>ScheduledFutuer 클래스는 Comparable을 구현하지 못한 클래스가 되버린다.</strong></p>

<h2 id="해결법">해결법</h2>

<p>해결하기 위해서는 Delayed 클래스가 Comparable을 구현했으니, 이걸 사용할 수 있도록 만들어 줘야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;&gt;</span> <span class="no">E</span> <span class="nf">max</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</code></pre></div></div>

<p>이렇게 하면 정상적으로 동작한다.</p>

<p>하지만 list은 publisher 역할을 하기 때문에 <strong>PECS 공식</strong>을 사용하여 다음과 같이 바꿔주면 좋다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span> <span class="kd">extends</span> <span class="nc">Comparable</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;&gt;</span> <span class="no">E</span> <span class="nf">max</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</code></pre></div></div>

<h2 id="와일드카드와-타입-매개변수">와일드카드와 타입 매개변수</h2>

<p>타입 배개변수와 와일드카드에는 공통되는 부분이 있어서, 메서드를 정의할 때 둘 중 어느 것을 사용해도 괜찮을 때가 많다.</p>

<p>예를 들어, 주어진 리스트에서 명시한 두 인덱스의 아이템들을 교환하는 정적 메서드를 두 방식으로 모두 정의 해보자.</p>

<ol>
  <li><strong>비한정적입 매개변수 swap()  2. 비한정적 와일드카드 swap()</strong></li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">);</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">);</span>
</code></pre></div></div>

<p>만약 <strong>public API라면</strong> 두 번째가 낫다. 어떤 리스트든 이 메서드에 넘기면 명시한 인덱스의 원소들을 교환해줄 것이고, 신경 써야 할 타입 매개변수도 없다.</p>

<h2 id="와일드카드와-타입-매개변수을-정하는-규칙">와일드카드와 타입 매개변수을 정하는 규칙</h2>

<p><strong>메서드 선언에 타입 매개변수가 한 번만 나오면 와일드카드로 대체하자.</strong>  이때 비한정적 타입 매개변수라면 비한정적 와일드카드로 바꾸고, 한정적 타입 매개변수라면 한정적 와일드카드로 바꾸면 된다.</p>

<p>하지만 위에 나온 2번째 swap 메서드는 문제가 하나 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 코드를 컴파일하면 다음의 오류메세지가 나온다.</p>

<p><img src="https://daeakin.github.io//images/item31/image1.png" alt="" />)</p>

<p>방금 꺼낸 원소를 리스트에 다시 넣을 수 없게 된다. 그 이유는 리스트이 타입이 <code class="language-plaintext highlighter-rouge">List&lt;?&gt;</code> 인데 , <code class="language-plaintext highlighter-rouge">List&lt;?&gt;</code> 에는 null 외에는 어떤 값도 넣을 수 없다는 데 있다.</p>

<p><strong>이 오류를 해결하기 위해서는 와일드카드 타입의 실제 타입을 알려주는 메서드를 private 도우미 메서드로 따로 작성하여 활용하는 방법이다.</strong> 실제 타입을 알아내려면 이 도우미 메서드는 제너릭 메서드여야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">swapHelper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">//와일드카드 타입을 실제 타입으로 바꿔주는 private 도우미 메서드</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">swapHelper</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>swapHelper 메서드는 리스트가 List&lt;E&gt;임을 알고 있다.</strong> 즉 이 리스트에서 꺼낸 값의 타입은 항상 E 이고 E 타입의 값이라면 이 리스트에 넣어도 안전함을 알 고 있다.</p>

<p>swap 메서드 내부에서는 더 복잡한 메서드를 이용했지만, 덕분에 외부에서는 와일드카드 기반의 멋진 선언을 유지할 수 있었다. <strong>즉, swap 메서드를 호출하는 클라이언트는 복잡한 swapHelper의 존재를 모른 채 그 혜택을 누릴 수 있다.</strong></p>
:ET